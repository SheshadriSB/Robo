import serial
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from collections import deque

# Serial port configuration
SERIAL_PORT = '/dev/ttyUSB0'  # Your serial port
BAUD_RATE = 115200
ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)

# Real-time data buffers
BUFFER_SIZE = 100  # Number of data points to keep in the graph
time_data = deque(maxlen=BUFFER_SIZE)
rpm_data = deque(maxlen=BUFFER_SIZE)
output_data = deque(maxlen=BUFFER_SIZE)

# Initialize the plot
fig, ax = plt.subplots()
line_rpm, = ax.plot([], [], label="RPM", color="blue")
line_output, = ax.plot([], [], label="Output", color="red")
ax.set_xlim(0, BUFFER_SIZE)
ax.set_ylim(0, 300)  # Adjust based on your Setpoint
ax.set_xlabel("Time (units)")
ax.set_ylabel("Values")
ax.legend()
plt.title("Real-Time RPM and Output Plot")

# Update function for the animation
def update(frame):
    global ser
    if ser.in_waiting > 0:
        try:
            line = ser.readline().decode('utf-8').strip()  # Read and decode serial data
            rpm, output = map(float, line.split(","))  # Assuming "RPM,Output" format
            time_data.append(len(time_data))  # Incremental time data
            rpm_data.append(rpm)
            output_data.append(output)
            
            # Update plot data
            line_rpm.set_data(range(len(time_data)), rpm_data)
            line_output.set_data(range(len(time_data)), output_data)
            ax.set_xlim(0, len(time_data))  # Adjust x-axis dynamically
        except ValueError:
            pass  # Handle any bad data gracefully

    return line_rpm, line_output

# Start animation
ani = FuncAnimation(fig, update, interval=100)
plt.show()
